#!/usr/bin/env python

import argparse
import json
import sys

from changes.config import create_app, db
from changes.models import (
    Project, Repository, RemoteEntity
)

PROVIDER_CHOICES = ['koality', 'jenkins']


def abort():
    print('Aborted!')
    sys.exit(1)


def get_input(name, default=None, required=True, choices=None):
    output = name + ' ? '
    if default:
        output += '[%s] ' % (default,)

    if choices:
        output += '(%s) ' % ('|'.join(choices),)

    value = raw_input(output)
    if not value:
        value = default
    if required and not value:
        abort()
    return value

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage projects')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add project')
parser_add.add_argument('--label', dest='label', help='project label')
parser_add.add_argument('--repo-url', metavar='url', dest='repo_url', help='repository url')
parser_add.add_argument('--slug', metavar='slug', dest='slug', help='project slug')
parser_add.add_argument('--provider', dest='provider', help='provider slug', choices=PROVIDER_CHOICES)
parser_add.add_argument('--provider-options', dest='provider_options', help='provider options (json)')

parser_add = subparsers.add_parser('edit', help='edit project')
parser_add.add_argument('id', help='project ID or slug')
parser_add.add_argument('--label', dest='label', help='project label')
parser_add.add_argument('--slug', metavar='slug', dest='slug', help='project slug')
parser_add.add_argument('--provider', dest='provider', help='provider slug', choices=PROVIDER_CHOICES)
parser_add.add_argument('--provider-options', dest='provider_options', help='provider options (json)')

args = parser.parse_args()

if args.command == 'add':
    name = args.label or get_input('Project label')
    default_slug = name.replace(' ', '-').lower()
    if args.label:
        slug = args.slug or default_slug
    else:
        slug = args.slug or get_input('Project slug', default_slug)

    repo_url = args.repo_url or get_input('Repository URL')
    try:
        repo = Repository.query.filter_by(url=repo_url)[0]
    except IndexError:
        repo = Repository(url=repo_url)

    provider = args.provider or get_input('Provider', choices=PROVIDER_CHOICES)
    provider_options = json.loads(args.provider_options or "{}")

    if provider == 'koality':
        provider_options.setdefault('type', 'project')
        if not provider_options.get('remote_id'):
            provider_options['remote_id'] = get_input('Koality project ID')
    elif provider == 'jenkins':
        provider_options.setdefault('type', 'job')
        if not provider_options.get('remote_id'):
            provider_options['remote_id'] = get_input('Jenkins job name')
    else:
        abort()

    try:
        repo = Repository.query.filter_by(url=repo_url)[0]
    except IndexError:
        repo = Repository(url=repo_url)

    project = Project(
        slug=slug,
        name=name,
        repository=repo,
    )
    entity = RemoteEntity(
        provider=provider,
        internal_id=project.id,
        **provider_options
    )
    db.session.add(project)
    db.session.add(entity)
    db.session.commit()

    print "Created new project with ID {%s}" % (
        project.id,
    )

elif args.command == 'edit':
    if len(args.id) == 40:
        # assume its a uuid
        project = Project.query.get(args.id)
    else:
        project = Project.query.filter_by(slug=args.id).first()
    if not project:
        print "Project not found"
        sys.exit(1)

    if args.label:
        project.name = args.label
    if args.slug:
        project.slug = args.slug

    if args.provider_options:
        provider_options = json.loads(args.provider_options)
        need_provider_options = True
    else:
        provider_options = {}
        need_provider_options = False

    if args.provider:
        provider = args.provider
        need_provider_options = True

    if need_provider_options:
        if provider == 'koality':
            entity_type = 'project'
        elif provider == 'jenkins':
            entity_type = 'job'
        else:
            abort()

        entity = RemoteEntity.query.filter_by(
            provider=provider,
            internal_id=project.id,
            type=entity_type,
        ).first()
        if entity is None:
            entity = RemoteEntity(
                provider=provider,
                internal_id=project.id,
                remote_id=provider_options.get('remote_id'),
                type=entity_type,
            )

        if provider == 'koality':
            entity.remote_id = provider_options.get('remote_id') or get_input('Koality project ID')
        elif provider == 'jenkins':
            entity.remote_id = provider_options.get('remote_id') or get_input('Jenkins job name')

        db.session.add(entity)

    db.session.add(project)
    db.session.commit()

    print "Saved project with ID {%s}" % (
        project.id,
    )
