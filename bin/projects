#!/usr/bin/env python

import argparse
import sys

from changes.config import create_app, db
from changes.models import (
    Project, Repository, RemoteEntity
)

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage projects')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add project')

# parser_modify = subparsers.add_parser('modify', help='modify project')
# parser_modify.add_argument('id', metavar='project_id', help='project ID or slug')

# parser_remove = subparsers.add_parser('remove', help='remove project')
# parser_remove.add_argument('id', metavar='project_id', help='project ID or slug')

args = parser.parse_args()


if args.command == 'add':
    def abort():
        print('Aborted!')
        sys.exit(1)

    name = raw_input('Project name? ') or abort()
    default_slug = name.replace(' ', '-').lower()
    slug = raw_input('Project slug? [%s] ' % (default_slug, )) or default_slug
    repo_url = raw_input('Repository URL? ') or abort()

    provider = raw_input('Provider? (koality|jenkins) ') or abort()
    if provider == 'koality':
        provider_options = {
            'type': 'project',
            'remote_id': raw_input('Koality project ID? ') or abort(),
        }
    elif provider == 'jenkins':
        provider_options = {
            'type': 'job',
            'remote_id': raw_input('Jenkins job name? ') or abort(),
        }
    else:
        abort()

    try:
        repo = Repository.query.filter_by(url=repo_url)[0]
    except IndexError:
        repo = Repository(url=repo_url)

    project = Project(
        slug=slug,
        name=name,
        repository=repo,
    )
    entity = RemoteEntity(
        provider=provider,
        internal_id=project.id,
        **provider_options
    )
    db.session.add(project)
    db.session.add(entity)
    db.session.commit()

    print "Created new project with ID {%s}" % (
        project.id,
    )
