#!/usr/bin/env python

import argparse
import sys

from changes.config import create_app, db, queue
from changes.constants import Status
from changes.models import (
    Project, Build
)

app = create_app()
app_context = app.app_context()
app_context.push()

parser = argparse.ArgumentParser(description='Manage builds')

subparsers = parser.add_subparsers(dest='command')

parser_add = subparsers.add_parser('add', help='add build')
parser_add.add_argument('--project', metavar='slug', dest='project_slug', help='project slug')
parser_add.add_argument('--label', dest='label', help='build label')
parser_add.add_argument('--message', dest='message', help='build message')
parser_add.add_argument('--sha', metavar='sha', dest='revision_sha', help='parent revision sha')

args = parser.parse_args()


if args.command == 'add':
    def abort():
        print('Aborted!')
        sys.exit(1)

    project_slug = args.project_slug or raw_input('Project slug? ') or abort()
    project = Project.query.filter_by(slug=project_slug)[0]

    label = args.label or raw_input('Build label? ') or abort()
    message = args.message or raw_input('Build message? ') or abort()
    revision_sha = args.revision_sha or raw_input('Parent revision SHA? ') or abort()

    build = Build(
        project=project,
        repository=project.repository,
        label=label,
        message=message,
        revision_sha=revision_sha,
        status=Status.queued,
    )

    # TODO: this should use a backend defined by the project
    from changes.backends.jenkins.builder import JenkinsBuilder
    backend = JenkinsBuilder(app=app, base_url=app.config['JENKINS_URL'])
    backend.create_build(build)

    queue.delay('sync_build', kwargs={
        'build_id': build.id.hex,
    })

    db.session.add(build)
    db.session.commit()

    print "Created new build with ID {%s}" % (
        build.id,
    )
